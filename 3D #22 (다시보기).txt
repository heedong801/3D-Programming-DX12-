5/24 리소스 장벽

리소스배리어 함수는 가급적 적게 호출하도록 하는 것이 성능이 좋다. (1개 10번 보다는 10개를 1번에)

디바이스의 함수들은 즉시 실행
리소스의 함수(EX map, unmap등) 즉시 실행
커맨드리스트의 함수( 커맨드큐를 통해 사용 )

VS 입력 시멘틱과 레이아웃 출력 벡터는 일치해야함

파이프라인

방향벡터 w = 0, 위치벡터는w = 1 왜냐면 4차원으로 바꿔도 탈이없음

인스턴스 데이터의 경우 마지막 인자 1

중요!
동일 모델을 많이 그러져야 한다면 Instance Counter 1이 아닌 값 사용하면 GPU가 하드웨어적으로 빨리 그려낼 수 있음
DrawInstanced()
VertexCounPerInstanxe : 육면체의 경우 36
인스턴싱 함수로 (BATCH)

각 객체마다 방향과 위치가 달라야함

StartVertexLocation (실제 조립을 시작할 정점의 인덱스)
입력조립기가 정점들을 조립하기 위한 시작인덱스 0은 처음부터
맨 마지막 인자에 따라 이 정보가 몇번 사용될지 지정할 수 있음. 

GPU 인스턴싱 ? 소프트웨어 인스턴싱 ?

프리미티브 유형
대부분 삼각형 사용

Degenerated Tri
세 점이 직선상의 있거나 한 점일때 다음으로 흘려보내지 않음

삼각형 구성시 와인딩오더 중요
삼각형스트립은 무조건 홀수는 시계방향, 반대는 반시계방향으로 구성된다.
그래서 홀수번째가 저절로 뒤집어짐 그래서 넣을땐 시계반시계 순으로 넣으면 됨

같은 점에 대해서 똑같은 연산을 해야하므로 시간이 오래걸림
메모리도 3번의 경우 똑같이 쓰이기 때문에 쓸데없이 많이 씀

Draw--는 인데스버퍼없이
DrawIndexed 있을 때

인덱스버퍼를 위해 인트형 배열만 만들어주면 되므로 메모리 절약
트랜스폼에 대한 시간도 절약 - 음성

정점 버퍼 뷰 생성

IASetVertexBuffers함수 역시 10개 한꺼번에 하는게 좋음

두번째 과제 - 과제1 을 다이렉트12 버전으로 바꾸기
              육면체면 색깔이 다다르게 그려야한다.
피킹 폭발시 색깔면에 따라

=======================================================================================================================
업로드힙으로 정점버퍼를 만들경우 동기화 문제로 인한 성능 저하

인풋 레이아웃 정점버퍼내의 한 정점의 구조를 설명

방향을 나타내는 4차원벡터 w = 0 왜냐 위치정보가 필요없기 때문
인스턴스 데이터의 가장 기본은 위치와 방향 즉, 월드변환행렬

StartVertexLocation을 지정할 필요가 있는 이유?
(ex 총을 들고 있는 모델에 정점위치를 알고 있으면 그 모델 하나로 총을 든 모델, 들지 않은 모델을 둘 다 그려낼 수 있음)

GPU 인스터싱(하드웨어 인스턴싱) : GPU는 즉, 그래픽스 파이프라인은 똑같은 오브젝트를 여러개 그릴 경우 GPU 내부에서 처리를 해줌
따라하기 7 참조

인덱스버퍼가 필요한 이유?
중복된 정점에 대한 메모리를 여러번 사용하는 문제
그 정점들의 변환하는 데에 있어서 1번의 처리로 다 알고 있는데, 중복된 만큼 똑같은 처리를 계속하여 시간문제도 발생

모든 리소스의 주소는 GPU Virtual 주소