4/19
Comptr 클래스
인터페이스 포인터의 소멸자에서 Release()를 호출하는 스마트 포인터 구현
명시적으로 Release 하면 콤객체 쓰면 됨 그러나 호출 까먹으면 메모리릭 현상 발생
콤객체 쓰면 안써도 됨

DXGI 다이렉트X 그래픽스 기반시설(도로망, 수도시설 등)
-DirectX 그래픽 런타임에 독립적인 저수준의 작을 관리
	하드웨어 디바이스의 열거, 모니터의 열거, 프리젠트, 전체 화면 모드로의 전환 등
-새로운 그래픽 라이브러리(DirectX)가 나오더라도 변하지 않을 수 있도록 구성
-Direct3D과 DXGI기반시설 분리 왜냐하면? 운영체제에 따라 그래픽카드가 하는 일에 따라 서로 영향을 미칠 수 있기 때문( 서로 독립적으로 운영하기 위해 )
-DXGI : 운영체제가 제공하는 라이브러리 제공
-DXGI 모델에 따라서 인터페이스 클래스들이 제공

주의점: 모든 운영체제에서 돌아가고 싶게 만들고 싶으면 Adater 제일 아랫버전 써야함?

모든 컴퓨터에 있는 하드웨어적인 장치들을 총괄하는 것이 IDXGIFactory

DXGI 클래스는 com 객체니 IUnknown을 상속
IDXGISwapChain::GetBuffer() : 응용프로그램에서는 전면버퍼가 있는지도 사용할 수도 없음. 즉 후면버퍼 넘겨받는 함수, 여러 개 일경우
인덱스로 구분함

모든 하드웨어적인 장치들은 Factory로 관리가 됨 그래서 먼저 만들어야함
그 다음 스왑체인(멤버함수)을 만들어져야 프레젠트를 또 할수 있음
EnumAdapters :  그래픽카드의 개수 셈
GetDesc : 이 모니터가 어느회사, 모델이 뭔지 리턴으로 알 수 있음

HRESULT = UINT 대부분의 함수의 반환값으로 여러값 리턴, 성공, 실패 부터 실패원인까지 알 수 있다.
S_OK가 아닌 다른값은 어떻게서든 문제가 발생한 것을 의미
E_FAIL : 넘겨준 인터페이스의 포인터의 값이 NULL인것

SUCCEEDED or FAILED 매크로와 함수 반환값으로 원인파악까지

GetDesc함수를 사용하여 어댑터나 아웃풋에 대한 세부적인 정보를 볼 수 있다.

GetDisplayModeList 해당 모니터가 쓸 수 있는 해상도의 리스트를 볼 수 있음
내 게임이 최대로 어떤 해상도에서 동작이 되게 만들게 해야하는지를 이 함수를 통해 알 수 있음
첫 매개변수는 DXGI_FORMAT 한 픽셀의 포맷

Direct3D 12 디바이스 출력
Direct3D 기본요소 = Device & Command List
Direct3D 디바이스는 상태 기계(State Machine)이다.
Set & Draw
상태를 바꾸는 일 = Set (ex 티비 볼륨을 바꾸는 일 )

D3D12CreateDevice()함수
-디스플레이 어댑처를 나타내는 디바이스를 생성
첫번째 인자 DXGI(어댑터)인터페이스 포인터로 NULL일시 첫번째 그래픽카드(어댑터)를 사용해
두번째 인자 enum으로 상수로 정의되어 있는데, Direct3D가 제공하는 기능을 의미, 우리는 12쓸거니까 위에 둘 중 하나로 택해서 만들어야함
지원을 못하는 기능을 넣어버리면 결과값으로 FAIL이 뜬다.
그래픽어댑터가 내가 원하는 Feature level 만족하면 성공함.
특성레벨 : 그래픽카드가 지원할 수 있는 DirectX3D 라이브러리 기능을 의미

어댑터 -> 팩토리 -> 어댑터enum -> Create Device

하드웨어적으로 불가능한 것을 소프트웨어적으로 해결 해주는 것 : 이뮬레이터
워프 : 운영체제가 제공하는 것으로, 그래픽 디바이스
하드웨어적으로 디바이스를 생성할 수 없으면 워프 디바이스를 찾아보면 됨