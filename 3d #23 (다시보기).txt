5/29	HLSL
 
벡터 데이터 형
벡터를 1차원 배열처럼 사용가능하다.
 
스위즐링의 의미, 한계점	 = 위치와 색상을 섞어 쓸 수 없다.
스위즐링 : 하나 이상의 요소를 임의의 순서로 사용
마스킹의 의미와 스위즐링과의 차이, 한계점	= 위치와 색상을 섞어 쓸 수 없다., 똑같은 놈이 2번 나올 수 도 없다.
f4d.xx = pos.xy 이런식으로 불가능
마스킹 : 하나 이상의 요소에 저장할 수 있음

작은놈을 큰 놈에 대입하는 경우 반복해서 넣어줌
큰 놈을 작은놈에 대입하면 큰 놈은 순서대로 작은 놈쪽에 대입해줌
 
행렬 데이터 형
배열표현으로는 스위즐링이 가능한가? 불가능하다. 하지만 _m00이나, 11에 대한 표현법으로는 가능하다
 
행렬을 쉐이더로 넘기기 위해서는 전치행렬이 필요되는 이유?
=다이렉트에서는 행우선 행렬로 저장,  쉐이더에서는 열우선이라 
행렬을 쉐이더로 넘기기 위해서는 전치행렬이 필요
 
벡터와 행렬 수식
쉐이더에서 벡터/행렬의 사칙연산이 어떻게 적용되나? 요소별연산
 
쉐이더에서 제공하는 내장함수
dot, mul(행렬곱)
 
자료형(구조체), 자료형(Data Types)
보간에 대한 기본값 = 선형
 
텍스처 Skip
 
흐름제어
discard의 의미 = statement로 픽셸세이더에서만 사용 가능하고, 현재 픽셀을 버리라는 의미, 현재 픽셀을 버리고 파이프라인을 여기서 끝내라는 의미 리턴도 없고 출력병합기로 안감. 입력조립기에서 새로 시작
Attribute를 쓰면 좋은점	= 성능상 이점을 얻을 수 있음 실행속도면에서
사용 예 흐름제어(3번째장)
 
a0 = b0 + c0; ---- a999 = b999 + c999;
이 코드가 포루프보다 훨씬 빠름
 
함수
쉐이더 함수는 인라인함수이고, 재귀호출을 지원하지 않음
파라미터는 기본적으로 Call by value
in, out 함수 앞에 쓰이는 키워드 등의 의미?
in은 값은 함수 내부로 전달하기 위해서 사용한다. out은 반대의 의미 호출한 쪽으로 돌려주기 위한 파라미터
이런 키워드가 붙지 않은 파라미터들은 함수내부에서 호출한쪽으로 전달 불가
 
기하, 스트림 Skip
 
내장함수
모든파라미터에 대해 반환경까지 오버로드 되어있음. abs요소별 연산
예외로 외적같이 파라미터가 제한되어 있는 놈도 있음
 
clip(x) 반환값 x, x가 0보다 작으면 버림 리턴이없는 함수
if f < 0 discard == clip(f) 같은 의미이다.
 mul함수는 dot함수와 의미가 같다  내적을 의미

접선(tangent)
접선에 수직인 선분(법선 Normal)
바이노멀, 바이탄젠트?
 일반적으로 법선을 z축, 접선을 x축, 나머지 축을 바이노멀 혹은 바이탄젠트라고 부름
종법선벡터 이 축으로 행렬을 만들면 직교행렬이 되고, 직교행렬의 장점은 역행렬 = 전치행렬이 됨

mul.x 가 행벡터, y가 열벡터 곱의 의미
행렬 * 벡터는 = 이 벡터를 이 행렬의 역행렬의 곱하기를 해라.
이 벡터를 이 변환의 역변환으로 해
따라하기 14, 15
Shaders.hlsl
 
cbuffer --- : reg(b0)
{
	matrix	--- : packoffset(c0);
}
 
메쉬클래스

====