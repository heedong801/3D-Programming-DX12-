#pragma once

enum Pos{ FRONTBOX= 101, MIDBOX, BACKBOX };

class CMesh
{
public:  
	CMesh(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList);    
	virtual ~CMesh();
private:
	int m_nReferences = 0;
public: 
	void AddRef() { m_nReferences++; } 
	void Release() { if (--m_nReferences <= 0) delete this; }
	void ReleaseUploadBuffers();
protected: 
	ID3D12Resource * m_pd3dVertexBuffer = NULL; 
	ID3D12Resource *m_pd3dVertexUploadBuffer = NULL;
	D3D12_VERTEX_BUFFER_VIEW m_d3dVertexBufferView;
	D3D12_PRIMITIVE_TOPOLOGY m_d3dPrimitiveTopology = D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
	
	UINT m_nSlot = 0; 
	UINT m_nVertices = 0; 
	UINT m_nStride = 0; 
	UINT m_nOffset = 0;

public: 
	virtual void Render(ID3D12GraphicsCommandList *pd3dCommandList);

protected: 
	ID3D12Resource * m_pd3dIndexBuffer = NULL;
	ID3D12Resource *m_pd3dIndexUploadBuffer = NULL; 
	
	/*인덱스 버퍼(인덱스의 배열)와 인덱스 버퍼를 위한 업로드 버퍼에 대한 인터페이스 포인터이다.
	인덱스 버퍼는 정점 버퍼(배열)에 대한 인덱스를 가진다.*/ 
	D3D12_INDEX_BUFFER_VIEW m_d3dIndexBufferView;
	
	UINT m_nIndices = 0; 
	//인덱스 버퍼에 포함되는 인덱스의 개수이다. 
	
	UINT m_nStartIndex = 0; 
	//인덱스 버퍼에서 메쉬를 그리기 위해 사용되는 시작 인덱스이다. 
	
	int m_nBaseVertex = 0; 
	//인덱스 버퍼의 인덱스에 더해질 인덱스이다.
public:
	BoundingOrientedBox			m_xmOOBB;

	void SetOOBB(XMFLOAT3& xmCenter, XMFLOAT3& xmExtents, XMFLOAT4& xmOrientation) { m_xmOOBB = BoundingOrientedBox(xmCenter, xmExtents, xmOrientation); }
};

//정점을 표현하기 위한 클래스를 선언한다.
class CVertex
{ 
protected: 
	//정점의 위치 벡터이다(모든 정점은 최소한 위치 벡터를 가져야 한다).   
	XMFLOAT3 m_xmf3Position;

public:
	CVertex()
	{ 
		m_xmf3Position = XMFLOAT3(0.0f, 0.0f, 0.0f);
	} 
	CVertex(XMFLOAT3 xmf3Position) 
	{ 
		m_xmf3Position = xmf3Position;
	} 
	~CVertex()
	{ 
	}
};

class CDiffusedVertex : public CVertex 
{
protected: 
	//정점의 색상이다.  
	XMFLOAT4 m_xmf4Diffuse;
public: 
	CDiffusedVertex() 
	{ 
		m_xmf3Position = XMFLOAT3(0.0f, 0.0f, 0.0f); 
		m_xmf4Diffuse = XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f);
	} 
	CDiffusedVertex(float x, float y, float z, XMFLOAT4 xmf4Diffuse) 
	{ 
		m_xmf3Position = XMFLOAT3(x, y, z);
		m_xmf4Diffuse = xmf4Diffuse; 
	} 
	CDiffusedVertex(XMFLOAT3 xmf3Position, XMFLOAT4 xmf4Diffuse)
	{
		m_xmf3Position = xmf3Position; m_xmf4Diffuse = xmf4Diffuse;
	}
	~CDiffusedVertex() { }
};

class CTriangleMesh : public CMesh 
{ 
public:  
	CTriangleMesh(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList);
	virtual ~CTriangleMesh() { } 
};

class CCubeMeshColorful : public CMesh
{
public: 
	//직육면체의 가로, 세로, 깊이의 길이를 지정하여 직육면체 메쉬를 생성한다. 
	CCubeMeshColorful(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 2.0f, float fHeight = 2.0f, float fDepth = 2.0f);
	virtual ~CCubeMeshColorful();
};

class CAirplaneMeshDiffused : public CMesh 
{
public: 
	CAirplaneMeshDiffused(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 20.0f, float fHeight = 20.0f, float fDepth = 4.0f, XMFLOAT4 xmf4Color = XMFLOAT4(1.0f, 1.0f, 0.0f, 0.0f)); 
	virtual ~CAirplaneMeshDiffused(); 
};

class CWallMesh : public CMesh
{
public:
	CWallMesh(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 2.0f, float fHeight = 2.0f, float fDepth = 2.0f, XMFLOAT4 xmf4Diffuse = XMFLOAT4(1,1,1,1), int CheckTree = 0);
	virtual ~CWallMesh();
}; 

class CCubeMeshDiffused : public CMesh
{
public:
	//직육면체의 가로, 세로, 깊이의 길이를 지정하여 직육면체 메쉬를 생성한다. 
	CCubeMeshDiffused(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 2.0f, float fHeight = 2.0f, float fDepth = 2.0f, XMFLOAT4 xmf4Diffuse = XMFLOAT4(1, 1, 1, 1));
	virtual ~CCubeMeshDiffused();
};

class CCubeMeshSimilar : public CMesh
{
public:
	//직육면체의 가로, 세로, 깊이의 길이를 지정하여 직육면체 메쉬를 생성한다. 
	CCubeMeshSimilar(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 2.0f, float fHeight = 2.0f, float fDepth = 2.0f, XMFLOAT4 xmf4Diffuse = XMFLOAT4(1, 1, 1, 1));
	virtual ~CCubeMeshSimilar();
};

class CCubeMeshRandom : public CMesh
{
public:
	//직육면체의 가로, 세로, 깊이의 길이를 지정하여 직육면체 메쉬를 생성한다. 
	CCubeMeshRandom(ID3D12Device *pd3dDevice, ID3D12GraphicsCommandList *pd3dCommandList, float fWidth = 2.0f, float fHeight = 2.0f, float fDepth = 2.0f);
	virtual ~CCubeMeshRandom();
};